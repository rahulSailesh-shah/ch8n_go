/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedWorkflowsIndexRouteImport } from './routes/_authenticated/workflows/index'
import { Route as AuthenticatedExecutionsIndexRouteImport } from './routes/_authenticated/executions/index'
import { Route as AuthenticatedCredentialsIndexRouteImport } from './routes/_authenticated/credentials/index'
import { Route as AuthenticatedWorkflowsWorkflowIdRouteImport } from './routes/_authenticated/workflows/$workflowId'
import { Route as AuthenticatedExecutionsExecutionIdRouteImport } from './routes/_authenticated/executions/$executionId'
import { Route as AuthenticatedCredentialsCredentialIdRouteImport } from './routes/_authenticated/credentials/$credentialId'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedWorkflowsIndexRoute =
  AuthenticatedWorkflowsIndexRouteImport.update({
    id: '/workflows/',
    path: '/workflows/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedExecutionsIndexRoute =
  AuthenticatedExecutionsIndexRouteImport.update({
    id: '/executions/',
    path: '/executions/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedCredentialsIndexRoute =
  AuthenticatedCredentialsIndexRouteImport.update({
    id: '/credentials/',
    path: '/credentials/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedWorkflowsWorkflowIdRoute =
  AuthenticatedWorkflowsWorkflowIdRouteImport.update({
    id: '/workflows/$workflowId',
    path: '/workflows/$workflowId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedExecutionsExecutionIdRoute =
  AuthenticatedExecutionsExecutionIdRouteImport.update({
    id: '/executions/$executionId',
    path: '/executions/$executionId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedCredentialsCredentialIdRoute =
  AuthenticatedCredentialsCredentialIdRouteImport.update({
    id: '/credentials/$credentialId',
    path: '/credentials/$credentialId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/credentials/$credentialId': typeof AuthenticatedCredentialsCredentialIdRoute
  '/executions/$executionId': typeof AuthenticatedExecutionsExecutionIdRoute
  '/workflows/$workflowId': typeof AuthenticatedWorkflowsWorkflowIdRoute
  '/credentials': typeof AuthenticatedCredentialsIndexRoute
  '/executions': typeof AuthenticatedExecutionsIndexRoute
  '/workflows': typeof AuthenticatedWorkflowsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/credentials/$credentialId': typeof AuthenticatedCredentialsCredentialIdRoute
  '/executions/$executionId': typeof AuthenticatedExecutionsExecutionIdRoute
  '/workflows/$workflowId': typeof AuthenticatedWorkflowsWorkflowIdRoute
  '/credentials': typeof AuthenticatedCredentialsIndexRoute
  '/executions': typeof AuthenticatedExecutionsIndexRoute
  '/workflows': typeof AuthenticatedWorkflowsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/_authenticated/credentials/$credentialId': typeof AuthenticatedCredentialsCredentialIdRoute
  '/_authenticated/executions/$executionId': typeof AuthenticatedExecutionsExecutionIdRoute
  '/_authenticated/workflows/$workflowId': typeof AuthenticatedWorkflowsWorkflowIdRoute
  '/_authenticated/credentials/': typeof AuthenticatedCredentialsIndexRoute
  '/_authenticated/executions/': typeof AuthenticatedExecutionsIndexRoute
  '/_authenticated/workflows/': typeof AuthenticatedWorkflowsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/signup'
    | '/credentials/$credentialId'
    | '/executions/$executionId'
    | '/workflows/$workflowId'
    | '/credentials'
    | '/executions'
    | '/workflows'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/signup'
    | '/credentials/$credentialId'
    | '/executions/$executionId'
    | '/workflows/$workflowId'
    | '/credentials'
    | '/executions'
    | '/workflows'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/login'
    | '/signup'
    | '/_authenticated/credentials/$credentialId'
    | '/_authenticated/executions/$executionId'
    | '/_authenticated/workflows/$workflowId'
    | '/_authenticated/credentials/'
    | '/_authenticated/executions/'
    | '/_authenticated/workflows/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/workflows/': {
      id: '/_authenticated/workflows/'
      path: '/workflows'
      fullPath: '/workflows'
      preLoaderRoute: typeof AuthenticatedWorkflowsIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/executions/': {
      id: '/_authenticated/executions/'
      path: '/executions'
      fullPath: '/executions'
      preLoaderRoute: typeof AuthenticatedExecutionsIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/credentials/': {
      id: '/_authenticated/credentials/'
      path: '/credentials'
      fullPath: '/credentials'
      preLoaderRoute: typeof AuthenticatedCredentialsIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/workflows/$workflowId': {
      id: '/_authenticated/workflows/$workflowId'
      path: '/workflows/$workflowId'
      fullPath: '/workflows/$workflowId'
      preLoaderRoute: typeof AuthenticatedWorkflowsWorkflowIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/executions/$executionId': {
      id: '/_authenticated/executions/$executionId'
      path: '/executions/$executionId'
      fullPath: '/executions/$executionId'
      preLoaderRoute: typeof AuthenticatedExecutionsExecutionIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/credentials/$credentialId': {
      id: '/_authenticated/credentials/$credentialId'
      path: '/credentials/$credentialId'
      fullPath: '/credentials/$credentialId'
      preLoaderRoute: typeof AuthenticatedCredentialsCredentialIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedCredentialsCredentialIdRoute: typeof AuthenticatedCredentialsCredentialIdRoute
  AuthenticatedExecutionsExecutionIdRoute: typeof AuthenticatedExecutionsExecutionIdRoute
  AuthenticatedWorkflowsWorkflowIdRoute: typeof AuthenticatedWorkflowsWorkflowIdRoute
  AuthenticatedCredentialsIndexRoute: typeof AuthenticatedCredentialsIndexRoute
  AuthenticatedExecutionsIndexRoute: typeof AuthenticatedExecutionsIndexRoute
  AuthenticatedWorkflowsIndexRoute: typeof AuthenticatedWorkflowsIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedCredentialsCredentialIdRoute:
    AuthenticatedCredentialsCredentialIdRoute,
  AuthenticatedExecutionsExecutionIdRoute:
    AuthenticatedExecutionsExecutionIdRoute,
  AuthenticatedWorkflowsWorkflowIdRoute: AuthenticatedWorkflowsWorkflowIdRoute,
  AuthenticatedCredentialsIndexRoute: AuthenticatedCredentialsIndexRoute,
  AuthenticatedExecutionsIndexRoute: AuthenticatedExecutionsIndexRoute,
  AuthenticatedWorkflowsIndexRoute: AuthenticatedWorkflowsIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
