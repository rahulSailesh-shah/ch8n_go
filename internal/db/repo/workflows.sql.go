// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: workflows.sql

package repo

import (
	"context"
)

const createWorkflow = `-- name: CreateWorkflow :one
INSERT INTO workflow (name, description, user_id)
VALUES ($1, $2, $3)
RETURNING id, user_id, name, description, created_at
`

type CreateWorkflowParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	UserID      string `json:"user_id"`
}

func (q *Queries) CreateWorkflow(ctx context.Context, arg CreateWorkflowParams) (Workflow, error) {
	row := q.db.QueryRowContext(ctx, createWorkflow, arg.Name, arg.Description, arg.UserID)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteWorkflow = `-- name: DeleteWorkflow :exec
DELETE FROM workflow WHERE id = $1
`

func (q *Queries) DeleteWorkflow(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteWorkflow, id)
	return err
}

const getWorkflowByID = `-- name: GetWorkflowByID :one
SELECT id, user_id, name, description, created_at FROM workflow WHERE id = $1
`

func (q *Queries) GetWorkflowByID(ctx context.Context, id int32) (Workflow, error) {
	row := q.db.QueryRowContext(ctx, getWorkflowByID, id)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getWorkflowsByUserID = `-- name: GetWorkflowsByUserID :many
SELECT id, user_id, name, description, created_at FROM workflow where user_id = $1
`

func (q *Queries) GetWorkflowsByUserID(ctx context.Context, userID string) ([]Workflow, error) {
	rows, err := q.db.QueryContext(ctx, getWorkflowsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Workflow{}
	for rows.Next() {
		var i Workflow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkflows = `-- name: ListWorkflows :many
SELECT id, user_id, name, description, created_at FROM workflow ORDER BY id
`

func (q *Queries) ListWorkflows(ctx context.Context) ([]Workflow, error) {
	rows, err := q.db.QueryContext(ctx, listWorkflows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Workflow{}
	for rows.Next() {
		var i Workflow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkflow = `-- name: UpdateWorkflow :one
UPDATE workflow
SET name = $2, description = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, name, description, created_at
`

type UpdateWorkflowParams struct {
	ID          int32  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) UpdateWorkflow(ctx context.Context, arg UpdateWorkflowParams) (Workflow, error) {
	row := q.db.QueryRowContext(ctx, updateWorkflow, arg.ID, arg.Name, arg.Description)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
