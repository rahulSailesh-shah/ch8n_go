// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: nodes.sql

package repo

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createNode = `-- name: CreateNode :one
INSERT INTO node (workflow_id, name, type, position, data)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, workflow_id, name, type, position, data, created_at, updated_at
`

type CreateNodeParams struct {
	WorkflowID uuid.UUID       `json:"workflowId"`
	Name       string          `json:"name"`
	Type       string          `json:"type"`
	Position   json.RawMessage `json:"position"`
	Data       json.RawMessage `json:"data"`
}

func (q *Queries) CreateNode(ctx context.Context, arg CreateNodeParams) (Node, error) {
	row := q.db.QueryRow(ctx, createNode,
		arg.WorkflowID,
		arg.Name,
		arg.Type,
		arg.Position,
		arg.Data,
	)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.Name,
		&i.Type,
		&i.Position,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteNode = `-- name: DeleteNode :exec
DELETE FROM node WHERE id = $1 AND workflow_id = $2
`

type DeleteNodeParams struct {
	ID         uuid.UUID `json:"id"`
	WorkflowID uuid.UUID `json:"workflowId"`
}

func (q *Queries) DeleteNode(ctx context.Context, arg DeleteNodeParams) error {
	_, err := q.db.Exec(ctx, deleteNode, arg.ID, arg.WorkflowID)
	return err
}

const getNodeByID = `-- name: GetNodeByID :one
SELECT id, workflow_id, name, type, position, data, created_at, updated_at FROM node WHERE id = $1 AND workflow_id = $2
`

type GetNodeByIDParams struct {
	ID         uuid.UUID `json:"id"`
	WorkflowID uuid.UUID `json:"workflowId"`
}

func (q *Queries) GetNodeByID(ctx context.Context, arg GetNodeByIDParams) (Node, error) {
	row := q.db.QueryRow(ctx, getNodeByID, arg.ID, arg.WorkflowID)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.Name,
		&i.Type,
		&i.Position,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNodesByWorkflowID = `-- name: GetNodesByWorkflowID :many
SELECT id, workflow_id, name, type, position, data, created_at, updated_at FROM node WHERE workflow_id = $1
`

func (q *Queries) GetNodesByWorkflowID(ctx context.Context, workflowID uuid.UUID) ([]Node, error) {
	rows, err := q.db.Query(ctx, getNodesByWorkflowID, workflowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Node{}
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowID,
			&i.Name,
			&i.Type,
			&i.Position,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNodes = `-- name: ListNodes :many
SELECT id, workflow_id, name, type, position, data, created_at, updated_at FROM node ORDER BY updated_at DESC
`

func (q *Queries) ListNodes(ctx context.Context) ([]Node, error) {
	rows, err := q.db.Query(ctx, listNodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Node{}
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowID,
			&i.Name,
			&i.Type,
			&i.Position,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNode = `-- name: UpdateNode :one
UPDATE node
SET name = $3, type = $4, position = $5, data = $6, updated_at = NOW()
WHERE id = $1 AND workflow_id = $2
RETURNING id, workflow_id, name, type, position, data, created_at, updated_at
`

type UpdateNodeParams struct {
	ID         uuid.UUID       `json:"id"`
	WorkflowID uuid.UUID       `json:"workflowId"`
	Name       string          `json:"name"`
	Type       string          `json:"type"`
	Position   json.RawMessage `json:"position"`
	Data       json.RawMessage `json:"data"`
}

func (q *Queries) UpdateNode(ctx context.Context, arg UpdateNodeParams) (Node, error) {
	row := q.db.QueryRow(ctx, updateNode,
		arg.ID,
		arg.WorkflowID,
		arg.Name,
		arg.Type,
		arg.Position,
		arg.Data,
	)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.Name,
		&i.Type,
		&i.Position,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
