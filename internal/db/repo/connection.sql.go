// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: connection.sql

package repo

import (
	"context"

	"github.com/google/uuid"
)

const createConnection = `-- name: CreateConnection :one
INSERT INTO connection (workflow_id, source_node_id, target_node_id)
VALUES ($1, $2, $3)
RETURNING id, workflow_id, source_node_id, target_node_id, from_output, to_input, created_at, updated_at
`

type CreateConnectionParams struct {
	WorkflowID   uuid.UUID `json:"workflowId"`
	SourceNodeID uuid.UUID `json:"sourceNodeId"`
	TargetNodeID uuid.UUID `json:"targetNodeId"`
}

func (q *Queries) CreateConnection(ctx context.Context, arg CreateConnectionParams) (Connection, error) {
	row := q.db.QueryRow(ctx, createConnection, arg.WorkflowID, arg.SourceNodeID, arg.TargetNodeID)
	var i Connection
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.SourceNodeID,
		&i.TargetNodeID,
		&i.FromOutput,
		&i.ToInput,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteConnection = `-- name: DeleteConnection :exec
DELETE FROM connection WHERE id = $1 AND workflow_id = $2
`

type DeleteConnectionParams struct {
	ID         uuid.UUID `json:"id"`
	WorkflowID uuid.UUID `json:"workflowId"`
}

func (q *Queries) DeleteConnection(ctx context.Context, arg DeleteConnectionParams) error {
	_, err := q.db.Exec(ctx, deleteConnection, arg.ID, arg.WorkflowID)
	return err
}

const getConnectionByID = `-- name: GetConnectionByID :one
SELECT id, workflow_id, source_node_id, target_node_id, from_output, to_input, created_at, updated_at FROM connection WHERE id = $1 AND workflow_id = $2
`

type GetConnectionByIDParams struct {
	ID         uuid.UUID `json:"id"`
	WorkflowID uuid.UUID `json:"workflowId"`
}

func (q *Queries) GetConnectionByID(ctx context.Context, arg GetConnectionByIDParams) (Connection, error) {
	row := q.db.QueryRow(ctx, getConnectionByID, arg.ID, arg.WorkflowID)
	var i Connection
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.SourceNodeID,
		&i.TargetNodeID,
		&i.FromOutput,
		&i.ToInput,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getConnectionsByWorkflowID = `-- name: GetConnectionsByWorkflowID :many
SELECT id, workflow_id, source_node_id, target_node_id, from_output, to_input, created_at, updated_at FROM connection WHERE workflow_id = $1
`

func (q *Queries) GetConnectionsByWorkflowID(ctx context.Context, workflowID uuid.UUID) ([]Connection, error) {
	rows, err := q.db.Query(ctx, getConnectionsByWorkflowID, workflowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Connection{}
	for rows.Next() {
		var i Connection
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowID,
			&i.SourceNodeID,
			&i.TargetNodeID,
			&i.FromOutput,
			&i.ToInput,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listConnections = `-- name: ListConnections :many
SELECT id, workflow_id, source_node_id, target_node_id, from_output, to_input, created_at, updated_at FROM connection ORDER BY updated_at DESC
`

func (q *Queries) ListConnections(ctx context.Context) ([]Connection, error) {
	rows, err := q.db.Query(ctx, listConnections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Connection{}
	for rows.Next() {
		var i Connection
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowID,
			&i.SourceNodeID,
			&i.TargetNodeID,
			&i.FromOutput,
			&i.ToInput,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateConnection = `-- name: UpdateConnection :one
UPDATE connection
SET source_node_id = $3, target_node_id = $4, updated_at = NOW()
WHERE id = $1 AND workflow_id = $2
RETURNING id, workflow_id, source_node_id, target_node_id, from_output, to_input, created_at, updated_at
`

type UpdateConnectionParams struct {
	ID           uuid.UUID `json:"id"`
	WorkflowID   uuid.UUID `json:"workflowId"`
	SourceNodeID uuid.UUID `json:"sourceNodeId"`
	TargetNodeID uuid.UUID `json:"targetNodeId"`
}

func (q *Queries) UpdateConnection(ctx context.Context, arg UpdateConnectionParams) (Connection, error) {
	row := q.db.QueryRow(ctx, updateConnection,
		arg.ID,
		arg.WorkflowID,
		arg.SourceNodeID,
		arg.TargetNodeID,
	)
	var i Connection
	err := row.Scan(
		&i.ID,
		&i.WorkflowID,
		&i.SourceNodeID,
		&i.TargetNodeID,
		&i.FromOutput,
		&i.ToInput,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
